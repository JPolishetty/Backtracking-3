class Solution {
    List<List<String>> result;
    public List<List<String>> solveNQueens(int n) {
        result = new ArrayList<>();
        if(n == 0){
            return result;
        }
        int board[][] = new int[n][n];
        backtrack(board, n, 0);
        return result;
    }

    private void backtrack(int[][] board, int n, int row){
        //base
        if(row == n){
            List<String> s = new ArrayList<>();
                for(int i=0;i < n; i++){
                    StringBuilder sb = new StringBuilder();
                    for(int j=0; j<n; j++){
                        if(board[i][j] == 1){
                            sb.append('Q');
                        }
                        else{
                            sb.append('.');
                        }
                    }
                    s.add(sb.toString());
                }
                result.add(s);
            return;
        }

        //logic
        for(int i=0; i< n; i++){
            if(board[row][i] != 1 && isSafe(board, row, i, n)){
                //action
                board[row][i] = 1;
                //recurse
                backtrack(board, n, row+1);
                //backtrack
                board[row][i] = 0;
            }
        }
    }

    private boolean isSafe(int[][] board, int row, int col, int n){
        //check column
        int i = row;
        while(i < n){
            if(board[i][col] == 1){
                return false;
            }
            i++;
        }
        i = row;
        while(i >= 0){
            if(board[i][col] == 1){
                return false;
            }
            i--;
        }
        //check row
        int j = col;
        while(j < n){
            if(board[row][j] == 1){
                return false;
            }
            j++;
        }
        j = col;
        while(j >= 0){
            if(board[row][j] == 1){
                return false;
            }
            j--;
        }
        //check both diagonals
        i = row; j = col;
        while(i < n && j < n){
            if(board[i][j] == 1){
                return false;
            }
            i++;
            j++;
        }
        i = row; j = col;
        while(i >= 0 && j >= 0){
            if(board[i][j] == 1){
                return false;
            }
            i--;
            j--;
        }
        i = row; j = col;
        while(i < n && j >= 0){
            if(board[i][j] == 1){
                return false;
            }
            i++;
            j--;
        }
        i = row; j = col;
        while(i >= 0 && j < n){
            if(board[i][j] == 1){
                return false;
            }
            i--;
            j++;
        }
        return true;
    }
}
